#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:filetype=cfg
# vim:fenc=utf-8
#

[IA32]
bits = 32
# Gcc location
compiler = /usr/bin/gcc
# Dialect (att,intel)
dialect = intel
# Format compilation command
## {0}: compiler
## {1}: source file
## {2}: destination obj file
compilation_command = {0} -masm=intel -m32 -fno-pie -fno-stack-protector -c -o {2} {1}
# Format link command
## {0}: compiler
## {1}: object file
## {2}: destination executable file
link_command = {0} -m32 -fno-pie -fno-stack-protector -o {2} {1}
# Exec command
## {0}: debugger command
exec_command = /usr/bin/setarch $(/usr/bin/uname -m) -R {0}
# Gdb
gdb = /usr/bin/gdb
# Gdb command format
## {0}: gdb
## {1}: generated text command file
## {2}: executable file
gdb_command = {0} -q -n -x {1} {2}
# Asm template
asm_template = ./templates/sample.c
# Blacklisted registers
blacklist_register = cs, ss, ds, es, fs, gs
# rename_register = eip: ip, esp: sp
flag_register = eflags
flag_names = CF, _, PF, _, AF, _, ZF, SF, TF, IF, DF, OF, IOPL, _, NT, _, RF, VM, AC, VIF, VIP, ID
lib_path = /

[IA64]
bits = 64
# Gcc location
compiler = /usr/bin/gcc
# Format compilation command
## {0}: compiler
## {1}: source file
## {2}: destination obj file
compilation_command = {0} -masm=intel -fno-pie -fno-stack-protector -c -o {2} {1}
# Format link command
## {0}: compiler
## {1}: object file
## {2}: destination executable file
link_command = {0} -fno-pie -fno-stack-protector -o {2} {1}
# Exec command
## {0}: debugger command
exec_command = /usr/bin/setarch $(/usr/bin/uname -m) -R {0}
# Gdb
lib_path = /
gdb = /usr/bin/gdb
# Gdb command format
## {0}: gdb
## {1}: generated text command file
## {2}: executable file
gdb_command = {0} -q -n -x {1} {2}
# Asm template
asm_template = ./templates/sample.c
# Blacklisted registers
blacklist_register = cs, ss, ds, es, fs, gs
# rename_register = eip: ip, esp: sp
flag_register = eflags
flag_names = CF, _, PF, _, AF, _, ZF, SF, TF, IF, DF, OF, IOPL, _, NT, _, RF, VM, AC, VIF, VIP, ID

[ARM]
bits = 32
# Gcc location
compiler = /usr/bin/arm-linux-gnueabi-gcc
# Format compilation command
## {0}: compiler
## {1}: source file
## {2}: destination obj file
compilation_command = {0} -ggdb -fno-pie -fno-stack-protector -c -o {2} {1}
# Format link command
## {0}: compiler
## {1}: object file
## {2}: destination executable file
link_command = {0} -fno-pie -fno-stack-protector -o {2} {1}
# Gdb
gdb = /usr/bin/arm-linux-gnueabi-gdb
# Gdb command format
## {0}: gdb
## {1}: generated text command file
## {2}: executable file
gdb_command = {0} -q -n -x {1}
# Exec command
## {0}: executable file
#exec_command = /usr/bin/setarch $(/usr/bin/uname -m) -R {0}

# Qemu
qemu = /usr/bin/qemu-arm
qemu_port = 1234
lib_path = /usr/arm-linux-gnueabi
# Qemu command
## {0}: qemu
## {1}: gdb port
## {2}: library path
## {3}: executable file
qemu_command = {0} -g {1} -L {2} {3}
# Asm template
asm_template = ./templates/sample-arm.c
# blacklist_register = 
rename_register = r11: fp, cpsr: flags
flag_register = cpsr
flag_names = _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,V,C,Z,N
